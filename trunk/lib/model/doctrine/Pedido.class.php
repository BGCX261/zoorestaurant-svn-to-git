<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Pedido extends BasePedido implements JsonSerializable
{
	
	public function construct() {
		
		if ($this->isNew()) {
			try {
				parent::construct();
				$this->setEstado(EstadoPedido::pendiente());
				$this->setFecha(DateUtil::formatAsTimeStamp(time()));
				$this->setNumero(Restaurant::getInstance()->pedidos()->count() + 1);
			} catch (Exception $e) {
				 /**
                 * This try/catch clause is necessary to prevent the Doctrine data loader command from
                 * failing.
                 *
                 */
			}
			
		}
	}
	
	public function detalle() {
		return new SearchableReadonlyCollection($this->Detalle);
	}
	
	public function vaciar() {
		$this->Detalle->clear();
	}
	
	public function agregarDetalle($detalle) {
		$this->Detalle->add($detalle);
	}
	
	public function getJson($type = '') {
		$json = new JsonObject();
		$json
			->withValue('id', $this->getId())
			->withValue('numero', $this->getNumero())
			->withValue('fecha', $this->getFecha())
			->withObject('estado', $this->getEstado())
			->withObject('detalle', $this->detalle())
			->withValue('total', $this->calcularTotal());
			
		return $json;
		
	}
	
	public function calcularTotal() {
		$total = 0;
		foreach($this->detalle() as $detalle) {
			$total = $total + ($detalle->getProducto()->getPrecio() * $detalle->getCantidad() );
		}
		return $total;
	}
	
	/**
	 * Busca el producto en los detalles
	 * @param int $idProducto
	 * @return Detalle|null
	 */
	public function buscarProducto($producto) {
		foreach($this->detalle() as $detalle) {
			if($detalle->getProducto()->equals($producto)) {
				return $detalle;
			}
		}
		return null;
	}
	
	public function eliminarDetalle($detalle) {
		//$this->Detalle->remove($detalle);
		$detalle->delete();
		$this->refresh(true);
	}
	
}